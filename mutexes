<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example 中文版: 互斥锁</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'atomic-counters';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'stateful-goroutines';
          }
          
      }
  </script>
  <body>

    <div class="example" id="mutexes">
      <h2><a href="./">Go by Example 中文版</a>: 互斥锁</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>在前面的例子中，我们看到了如何使用原子操作来管理简单的计数器。
对于更加复杂的情况，我们可以使用一个<em><a href="http://zh.wikipedia.org/wiki/%E4%BA%92%E6%96%A5%E9%94%81">互斥锁</a></em>
来在 Go 协程间安全的访问数据。</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a href="https://play.studygolang.com/p/88LhRI1b0Qp"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
          <pre tabindex="0" class="chroma"><span class="kn">package</span> <span class="nx">main</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre tabindex="0" class="chroma"><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;math/rand&#34;</span>
    <span class="s">&#34;sync&#34;</span>
    <span class="s">&#34;sync/atomic&#34;</span>
    <span class="s">&#34;time&#34;</span>
<span class="p">)</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre tabindex="0" class="chroma"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>在这个例子中，<code>state</code> 是一个 map。</p>

          </td>
          <td class="code leading">
            
          <pre tabindex="0" class="chroma">
    <span class="kd">var</span> <span class="nx">state</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>mutex</code> 将同步对 <code>state</code> 的访问。</p>

          </td>
          <td class="code leading">
            
          <pre tabindex="0" class="chroma">
    <span class="kd">var</span> <span class="nx">mutex</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span><span class="p">{}</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>我们会持续追踪读写操作的数量。</p>

          </td>
          <td class="code leading">
            
          <pre tabindex="0" class="chroma">
    <span class="kd">var</span> <span class="nx">readOps</span> <span class="kt">uint64</span>
    <span class="kd">var</span> <span class="nx">writeOps</span> <span class="kt">uint64</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>这里我们启动 100 个协程，
每个协程以每 1ms 一次的频率来重复读取 state。</p>

          </td>
          <td class="code leading">
            
          <pre tabindex="0" class="chroma">
    <span class="k">for</span> <span class="nx">r</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">r</span> <span class="p">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">r</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">total</span> <span class="o">:=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="p">{</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>每次循环读取，我们使用一个键来进行访问，
<code>Lock()</code> 这个 <code>mutex</code> 来确保对 <code>state</code> 的独占访问，
读取选定的键的值，<code>Unlock()</code> 这个 mutex，并将 <code>ops</code> 值加 1。</p>

          </td>
          <td class="code leading">
            
          <pre tabindex="0" class="chroma">
                <span class="nx">key</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
                <span class="nx">mutex</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
                <span class="nx">total</span> <span class="o">+=</span> <span class="nx">state</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
                <span class="nx">mutex</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
                <span class="nx">atomic</span><span class="p">.</span><span class="nf">AddUint64</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">readOps</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>在下次读取前等待片刻。</p>

          </td>
          <td class="code leading">
            
          <pre tabindex="0" class="chroma">
                <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}()</span>
    <span class="p">}</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>同样的，我们启动 10 个协程来模拟写入操作，
使用和读取相同的模式。</p>

          </td>
          <td class="code leading">
            
          <pre tabindex="0" class="chroma">
    <span class="k">for</span> <span class="nx">w</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">w</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">w</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">{</span>
                <span class="nx">key</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
                <span class="nx">val</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
                <span class="nx">mutex</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
                <span class="nx">state</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="p">=</span> <span class="nx">val</span>
                <span class="nx">mutex</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
                <span class="nx">atomic</span><span class="p">.</span><span class="nf">AddUint64</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">writeOps</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
                <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}()</span>
    <span class="p">}</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>让这 10 个协程对 <code>state</code> 和 <code>mutex</code> 的操作持续 1 s。</p>

          </td>
          <td class="code leading">
            
          <pre tabindex="0" class="chroma">
    <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>获取并输出最终的操作计数。</p>

          </td>
          <td class="code leading">
            
          <pre tabindex="0" class="chroma">
    <span class="nx">readOpsFinal</span> <span class="o">:=</span> <span class="nx">atomic</span><span class="p">.</span><span class="nf">LoadUint64</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">readOps</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;readOps:&#34;</span><span class="p">,</span> <span class="nx">readOpsFinal</span><span class="p">)</span>
    <span class="nx">writeOpsFinal</span> <span class="o">:=</span> <span class="nx">atomic</span><span class="p">.</span><span class="nf">LoadUint64</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">writeOps</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;writeOps:&#34;</span><span class="p">,</span> <span class="nx">writeOpsFinal</span><span class="p">)</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>对 <code>state</code> 使用一个最终的锁，展示它是如何结束的。</p>

          </td>
          <td class="code">
            
          <pre tabindex="0" class="chroma">
    <span class="nx">mutex</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;state:&#34;</span><span class="p">,</span> <span class="nx">state</span><span class="p">)</span>
    <span class="nx">mutex</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
<span class="p">}</span></pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>运行这个程序，显示我们进行了大约 90,000 次 <code>mutex</code> 同步的 <code>state</code> 操作。</p>

          </td>
          <td class="code leading">
            
          <pre tabindex="0" class="chroma">
<span class="gp">$</span> go run mutexes.go
<span class="go">readOps: 83285
</span><span class="go">writeOps: 8320
</span><span class="go">state: map[1:97 4:53 0:33 2:15 3:2]</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>接下来我们将看一下，只使用协程和通道，
如何实现相同的任务状态管理。</p>

          </td>
          <td class="code empty">
            
          
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        下一个例子: <a href="stateful-goroutines">状态协程</a>
      </p>
      

<p class="footer">
    <a href="https://twitter.com/mmcgrana">@mmcgrana</a> 编写 | <a href="https://github.com/gobyexample-cn">gobyexample-cn</a> 翻译 | <a href="https://github.com/gobyexample-cn/gobyexample/issues">反馈</a> | <a href="https://github.com/gobyexample-cn/gobyexample">源码</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a>      </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import (\u000A    \"fmt\"\u000A    \"math/rand\"\u000A    \"sync\"\u000A    \"sync/atomic\"\u000A    \"time\"\u000A)\u000A');codeLines.push('func main() {\u000A');codeLines.push('    var state \u003D make(map[int]int)\u000A');codeLines.push('    var mutex \u003D \u0026sync.Mutex{}\u000A');codeLines.push('    var readOps uint64\u000A    var writeOps uint64\u000A');codeLines.push('    for r :\u003D 0; r \u003C 100; r++ {\u000A        go func() {\u000A            total :\u003D 0\u000A            for {\u000A');codeLines.push('                key :\u003D rand.Intn(5)\u000A                mutex.Lock()\u000A                total +\u003D state[key]\u000A                mutex.Unlock()\u000A                atomic.AddUint64(\u0026readOps, 1)\u000A');codeLines.push('                time.Sleep(time.Millisecond)\u000A            }\u000A        }()\u000A    }\u000A');codeLines.push('    for w :\u003D 0; w \u003C 10; w++ {\u000A        go func() {\u000A            for {\u000A                key :\u003D rand.Intn(5)\u000A                val :\u003D rand.Intn(100)\u000A                mutex.Lock()\u000A                state[key] \u003D val\u000A                mutex.Unlock()\u000A                atomic.AddUint64(\u0026writeOps, 1)\u000A                time.Sleep(time.Millisecond)\u000A            }\u000A        }()\u000A    }\u000A');codeLines.push('    time.Sleep(time.Second)\u000A');codeLines.push('    readOpsFinal :\u003D atomic.LoadUint64(\u0026readOps)\u000A    fmt.Println(\"readOps:\", readOpsFinal)\u000A    writeOpsFinal :\u003D atomic.LoadUint64(\u0026writeOps)\u000A    fmt.Println(\"writeOps:\", writeOpsFinal)\u000A');codeLines.push('    mutex.Lock()\u000A    fmt.Println(\"state:\", state)\u000A    mutex.Unlock()\u000A}\u000A');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
